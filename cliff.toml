# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first }} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.links.commit }}))\
          {% if commit.author.name -%} (by {{ commit.author.name }}){% endif %}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
    # Replace issue numbers and create a link to GitHub (assuming GitHub/similar)
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/kodelint/setup-devbox/issues/${2}))"},
    # Preprocessor for adding the commit link directly.
    # The `git-cliff` templating engine will use `commit.links.commit` for this.
    { pattern = '^(.*)$', replace = "${1}", replace_with = "https://github.com/kodelint/setup-devbox/commit/git_hash" },
]
# regex for parsing and grouping commits
commit_parsers = [
    # Explicitly capture breaking changes and place them at the top.
    { body = ".*BREAKING CHANGE:.*", group = "💥 Breaking Changes" },
    { message = "^feat", group = "🚀 Features" },
    { message = "^bug", group = "🐛 Bug Fixes" },
    { message = "^doc", group = "📚 Documentation" },
    { message = "^perf", group = "⚡ Performance" },
    { message = "^refactor", group = "♻️ Refactor" },
    { message = "^style", group = "🎨 Styling" },
    { message = "^test", group = "🧪 Testing" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "^chore", group = "🏠 Miscellaneous Tasks" },
    { message = "^ci", group = "🔧 Continuous Integration" },
    { message = "^build", group = "🔧 Build System" },
    { body = ".*security", group = "🔒 Security" },
    { message = "^revert", group = "◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42