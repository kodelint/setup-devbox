# Cargo.toml

# This section defines fundamental information about your Rust project,
# similar to how a package.json works for Node.js or a pom.xml for Java.
[package]
# 'name' is the name of your executable binary and the package itself.
# This is how you'll typically run your application (e.g., `cargo run --bin setup-devbox`).
name = "setup-devbox"
# 'version' follows Semantic Versioning (Major.Minor.Patch).
# It indicates the current release version of your application.
version = "0.5.1"
# 'edition' specifies the Rust edition to use for compiling this package.
# Rust editions allow the language to evolve without breaking existing code.
# "2024" is a newer edition that enables modern Rust features and syntax.
edition = "2024"
description = "Accelerate Your Development Environment Setup"
license = "MIT"
# The URL to the project's source code repository (e.g., GitHub).
repository = "https://github.com/kodelint/setup-devbox"

# This section lists all the external crates (libraries) that your project depends on.
# Cargo automatically downloads, compiles, and links these dependencies for you.
[dependencies]
# 'dirs' is a handy cross-platform utility crate for finding common user directories.
# This is super useful for locating things like the user's home directory, config directory,
# or data directory, which are essential for storing application-specific files (like state.json or configs).
dirs = "6.0.0"

# 'clap' is a powerful and flexible crate for parsing command-line arguments.
# It makes it easy to define subcommands, options, and flags for your CLI application.
# The 'derive' feature lets us define our command-line arguments right in our Rust code, which is super convenient!
# 'version' specifies the exact version of the clap crate to use.
# 'features = ["derive"]' enables declarative argument parsing using Rust's derive macros.
clap = { version = "4.5.41", features = ["derive"] }

# 'colored' is a fun little crate that lets us add colors to our text in the terminal.
# It makes our output much easier to read and more engaging!
colored = "3.0.0"

# 'chorno' for time
chrono = { version = "0.4", features = ["serde"] }

# 'serde' is like the universal translator for Rust data structures.
# It helps us convert our Rust data into various formats (like JSON or YAML) and vice-versa.
# The 'derive' feature gives us handy macros to automatically implement serialization/deserialization.
# 'version' specifies the exact version of the serde core library.
# 'features = ["derive"]' provides macros like `#[derive(Serialize, Deserialize)]`.
serde = { version = "1.0.219", features = ["derive"] }

# 'serde_yaml' specifically handles converting Rust data to and from the YAML format.
# We often use YAML for configuration files because it's quite human-readable.
serde_yaml = "0.9.34"

# 'serde_json' is another specialized part of the Serde family, but this one focuses on JSON.
# JSON is a very common format for web APIs and data exchange.
serde_json = "1.0.140"

# 'ureq' is a simple and easy-to-use HTTP client.
# It's what we'll use to make requests to web services (like GitHub's API).
# The 'json' feature adds convenience for handling JSON responses automatically.
# 'version' specifies the exact version of the ureq crate.
# 'features = ["json"]' adds convenience methods for sending and receiving JSON data in HTTP requests.
ureq = { version = "2.12.1", features = ["json"] }

# 'flate2' is a Rust binding to compression libraries (`miniz_oxide` and `zlib`).
# It's essential for handling common compression formats like Gzip, often found in `.tar.gz` archives.
flate2 = "1.1.2"

# 'tar' is a crate for creating, reading, and extracting `.tar` archives.
# These archives are commonly used on Unix-like systems to bundle multiple files into one.
# It's often used in conjunction with a compression library like `flate2` or `bzip2`.
tar = "0.4.44"

# 'zip' is a library for working with `.zip` archives.
# Zip files are another popular format for bundling and compressing files, especially common on Windows.
zip = "0.6.2"

# 'bzip2' provides bindings to the `bzip2` compression library.
# This crate allows your application to handle `.bz2` compressed files and `.tar.bz2` archives.
# Since it's a direct dependency here, it will always be compiled into your application.
bzip2 = "0.6.0"

# 'walkdir' is a utility for recursively walking a directory tree.
# This is useful for tasks like finding all files within a directory,
# or cleaning up temporary directories after installations.
walkdir = "2.5.0"

# 'tempfile' is a crate for creating temporary files and directories.
# This is useful for safely handling temporary data without worrying about cleanup,
# as the temporary files/directories are automatically deleted when they go out of scope.
tempfile = "3.20.0"

# 'xz2' provides bindings to the `liblzma` (XZ) compression library.
# This crate allows your application to handle `.xz` compressed files and `.tar.xz` archives,
# which are known for high compression ratios.
xz2 = "0.1.7"

# 'goblin' is a crate for parsing various binary executable formats (ELF, Mach-O, PE).
# This can be useful for inspecting executable files, understanding their structure,
# or potentially for dynamic loading or analysis tasks within the setup process.
goblin = "0.10.0"
sha2 = "0.10.9"
toml = "0.9.7"
shellexpand = "3.1.1"


[package.metadata.release]
# Don't publish to crates.io during release process
publish = false
# Don't push to git during release (we handle this in CI)
push = false
# Don't create tags during release (we handle this in CI)
tag = false
# Allow dirty working directory since CI might have made changes
allow-branch = ["main", "development"]
# Custom pre-release replacements can be defined here
pre-release-replacements = [
    {file="CHANGELOG.md", search="## \\[Unreleased\\]", replace="## [Unreleased]\n\n## [{{version}}] - {{date}}"},
    {file="README.md", search="setup-devbox/releases/download/v[0-9]+\\.[0-9]+\\.[0-9]+", replace="setup-devbox/releases/download/v{{version}}"},
]
